const empty_LS

func Main [in 0, out 0, local 3]
local[0] = $s0
local[1] = $s1
local[2] = $s2
$s1 = HeapAllocZ(8)
if $s1 goto :null1
Error("null pointer")
null1:
$a0 = $s1
$a1 = 10
call :LS.Start
$s2 = $v0
PrintIntS($s2)
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
ret

func LS.Start [in 0, out 0, local 6]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
local[4] = $s4
local[5] = $s5
$s2 = $a0
$s4 = $a1
$a0 = $s2
$a1 = $s4
call :LS.Init
$s5 = $v0
$a0 = $s2
call :LS.Print
$s4 = $v0
PrintIntS(9999)
$a0 = $s2
$a1 = 8
call :LS.Search
$s0 = $v0
PrintIntS($s0)
$a0 = $s2
$a1 = 12
call :LS.Search
$s3 = $v0
PrintIntS($s3)
$a0 = $s2
$a1 = 17
call :LS.Search
$s0 = $v0
PrintIntS($s0)
$a0 = $s2
$a1 = 50
call :LS.Search
$s3 = $v0
PrintIntS($s3)
$v0 = 55
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
$s4 = local[4]
$s5 = local[5]
ret

func LS.Print [in 0, out 0, local 5]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
local[4] = $s4
$s0 = $a0
$s1 = 1
while1_top:
$s2 = [$s0+4]
$s3 = LtS($s1 $s2)
if0 $s3 goto :while1_end
$s2 = [$s0+0]
if $s2 goto :null2
Error("null pointer")
null2:
$s3 = [$s2+0]
$s3 = Lt($s1 $s3)
if $s3 goto :bounds1
Error("array index out of bounds")
bounds1:
$s3 = MulS($s1 4)
$s3 = Add($s3 $s2)
$s4 = [$s3+4]
PrintIntS($s4)
$s1 = Add($s1 1)
goto :while1_top
while1_end:
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
$s4 = local[4]
ret

func LS.Search [in 0, out 0, local 9]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
local[4] = $s4
local[5] = $s5
local[6] = $s6
local[7] = $s7
$s1 = $a0
$s0 = $a1
$s2 = 1
$s3 = 0
$s4 = 0
while2_top:
$s5 = [$s1+4]
$s6 = LtS($s2 $s5)
if0 $s6 goto :while2_end
$s5 = [$s1+0]
if $s5 goto :null3
Error("null pointer")
null3:
$s6 = [$s5+0]
$s6 = Lt($s2 $s6)
if $s6 goto :bounds2
Error("array index out of bounds")
bounds2:
$s6 = MulS($s2 4)
$s6 = Add($s6 $s5)
$s7 = [$s6+4]
$s5 = Add($s0 1)
$s6 = LtS($s7 $s0)
if0 $s6 goto :if1_else
$s6 = 0
goto :if1_end
if1_else:
$t0 = LtS($s7 $s5)
if $t0 goto :if2_else
$s6 = 0
goto :if2_end
if2_else:
$s3 = 1
$s4 = 1
$s2 = [$s1+4]
if2_end:
if1_end:
$s2 = Add($s2 1)
goto :while2_top
while2_end:
$v0 = $s4
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
$s4 = local[4]
$s5 = local[5]
$s6 = local[6]
$s7 = local[7]
ret

func LS.Init [in 0, out 0, local 8]
local[0] = $s0
local[1] = $s1
local[2] = $s2
local[3] = $s3
local[4] = $s4
local[5] = $s5
local[6] = $s6
local[7] = $s7
$s1 = $a0
$s2 = $a1
[$s1+4] = $s2
$a0 = $s2
call :AllocArray
$s3 = $v0
[$s1+0] = $s3
$s0 = 1
$s2 = [$s1+4]
$s3 = Add($s2 1)
while3_top:
$s2 = [$s1+4]
$s4 = LtS($s0 $s2)
if0 $s4 goto :while3_end
$s2 = MulS(2 $s0)
$s4 = Sub($s3 3)
$s5 = [$s1+0]
if $s5 goto :null4
Error("null pointer")
null4:
$s6 = [$s5+0]
$s6 = Lt($s0 $s6)
if $s6 goto :bounds3
Error("array index out of bounds")
bounds3:
$s6 = MulS($s0 4)
$s6 = Add($s6 $s5)
$s7 = Add($s2 $s4)
[$s6+4] = $s7
$s0 = Add($s0 1)
$s3 = Sub($s3 1)
goto :while3_top
while3_end:
$v0 = 0
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
$s3 = local[3]
$s4 = local[4]
$s5 = local[5]
$s6 = local[6]
$s7 = local[7]
ret

func AllocArray [in 0, out 0, local 3]
local[0] = $s0
local[1] = $s1
local[2] = $s2
$s0 = $a0
$s1 = MulS($s0 4)
$s1 = Add($s1 4)
$s2 = HeapAllocZ($s1)
[$s2+0] = $s0
$v0 = $s2
$s0 = local[0]
$s1 = local[1]
$s2 = local[2]
ret

